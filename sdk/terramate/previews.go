package terramate

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// PreviewsService handles communication with the previews related
// methods of the Terramate Cloud API
type PreviewsService struct {
	client *Client
}

// Get retrieves detailed information about a stack preview.
//
// GET /v1/stack_previews/{org_uuid}/{stack_preview_id}
//
// This endpoint returns stack preview details including changeset sizes
// and log counts (but not the full logs or changeset content).
//
// Access: All members of the organization with any role are allowed to query.
func (s *PreviewsService) Get(ctx context.Context, orgUUID string, stackPreviewID int) (*StackPreviewV2, *Response, error) {
	if orgUUID == "" {
		return nil, nil, fmt.Errorf("organization UUID is required")
	}
	if stackPreviewID <= 0 {
		return nil, nil, fmt.Errorf("stack preview ID must be positive")
	}

	path := fmt.Sprintf("/v1/stack_previews/%s/%d", orgUUID, stackPreviewID)

	req, err := s.client.newRequest(ctx, http.MethodGet, path, nil)
	if err != nil {
		return nil, nil, fmt.Errorf("failed to create request: %w", err)
	}

	var preview StackPreviewV2
	resp, err := s.client.do(req, &preview)
	if err != nil {
		return nil, resp, err
	}

	return &preview, resp, nil
}

// GetLogs retrieves terraform command logs for a stack preview.
//
// GET /v1/stack_previews/{org_uuid}/{stack_preview_id}/logs
//
// This endpoint returns the terraform command output logs (stdout/stderr)
// which are essential for debugging failed plans.
//
// Access: All members of the organization with any role are allowed to query.
func (s *PreviewsService) GetLogs(ctx context.Context, orgUUID string, stackPreviewID int, opts *PreviewLogsOptions) (*StackPreviewLogsResponse, *Response, error) {
	if orgUUID == "" {
		return nil, nil, fmt.Errorf("organization UUID is required")
	}
	if stackPreviewID <= 0 {
		return nil, nil, fmt.Errorf("stack preview ID must be positive")
	}

	path := fmt.Sprintf("/v1/stack_previews/%s/%d/logs", orgUUID, stackPreviewID)

	if opts != nil {
		query := url.Values{}
		addPagination(query, opts.Page, opts.PerPage)
		addString(query, "channel", opts.Channel)
		if len(query) > 0 {
			path = path + "?" + query.Encode()
		}
	}

	req, err := s.client.newRequest(ctx, http.MethodGet, path, nil)
	if err != nil {
		return nil, nil, fmt.Errorf("failed to create request: %w", err)
	}

	var result StackPreviewLogsResponse
	resp, err := s.client.do(req, &result)
	if err != nil {
		return nil, resp, err
	}

	return &result, resp, nil
}

// ExplainErrors retrieves an AI-generated explanation of stack preview errors.
//
// GET /v1/stack_previews/{org_uuid}/{stack_preview_id}/ai/error_logs_explanation
//
// This endpoint returns a human-readable summary of what went wrong during
// a terraform plan, generated by AI analysis of the error logs.
//
// Access: All members of the organization with any role are allowed to query.
func (s *PreviewsService) ExplainErrors(ctx context.Context, orgUUID string, stackPreviewID int, force bool) (*SummaryResponse, *Response, error) {
	if orgUUID == "" {
		return nil, nil, fmt.Errorf("organization UUID is required")
	}
	if stackPreviewID <= 0 {
		return nil, nil, fmt.Errorf("stack preview ID must be positive")
	}

	path := fmt.Sprintf("/v1/stack_previews/%s/%d/ai/error_logs_explanation", orgUUID, stackPreviewID)

	if force {
		path += "?force=true"
	}

	req, err := s.client.newRequest(ctx, http.MethodGet, path, nil)
	if err != nil {
		return nil, nil, fmt.Errorf("failed to create request: %w", err)
	}

	var result SummaryResponse
	resp, err := s.client.do(req, &result)
	if err != nil {
		return nil, resp, err
	}

	return &result, resp, nil
}
